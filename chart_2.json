{
  "alias": "chart2",
  "name": "Chart 2",
  "descriptor": {
    "type": "timeseries",
    "sizeX": 10,
    "sizeY": 10.5,
    "resources": [
      {
        "url": "https://cdn.jsdelivr.net/npm/echarts@5.2.2/dist/echarts.min.js"
      }
    ],
    "templateHtml": "<div id=\"echart\" style=\"width:600px; height:400px;\"></div>",
    "templateCss": ".legend {\n    font-size: 13px;\n    line-height: 10px;\n}\n\n.legend table { \n    border-spacing: 0px;\n    border-collapse: separate;\n}\n\n.mouse-events .flot-overlay {\n    cursor: crosshair; \n}\n\n",
    "controllerScript": "\n\nself.onInit = function() {\n    \n    self.onResize();\n  \n    \n}\n\nfunction draw()\n{\n    function adjustHexOpacity (color, opacity) {\n  const r = parseInt(color.slice(1, 3), 16);\n  const g = parseInt(color.slice(3, 5), 16);\n  const b = parseInt(color.slice(5, 7), 16);\n\n  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + opacity + ')';\n}   \n\n        var data1 = [[1640968951095,2],[1640968961095,4],[1640968971095,6],[1640968981095,8]];\n\n    var data2 = [[1640968951095,1],[1640968961095,2],[1640968971095,3],[1640969981095,4]];\n    \n    \n    var myChart = echarts.init($('#echart', self.ctx.$container)[0]);\n    console.log(myChart)\n    \n    var legend = Array();\n    var series = Array();\n    \n    \n    for (var i=0; i < self.ctx.data.length; i++) {\n        var settings = self.ctx.data[i].dataKey.settings;\n        let legendElement = self.ctx.data[i].dataKey.label\n        //legend.push(legendElement);\n        \n        \n        let dataElement = Array();\n        var datasourceData = self.ctx.data[i];\n        var dataSet = datasourceData.data;\n        var dataToAdd = Array();\n        for (var d = 0; d < dataSet.length; d++) {\n            var tsValuePair = dataSet[d];\n            var ts = tsValuePair[0];\n            var value = tsValuePair[1];\n            \n            dataElement.push([ts, value.toFixed(settings.numberOfDigits || 1)]);\n        }\n        dataToAdd.push(dataElement);\n        \n        \n        var seriesMarkLine = {}\n        \n        seriesMarkLine.data = [\n            \n                    \n                ]\n    var seriesMarkLineData = {type: 'average', name: 'Average'}\n    if (settings.showAverage)\n    seriesMarkLine.data.push(seriesMarkLineData)\n    \n    if (self.ctx.settings.annotations != undefined)\n    {\n        console.log(self.ctx.settings.annotations)\n    for (var j = 0; j < self.ctx.settings.annotations.length; j++)\n    {\n    \n        let seriesMarkLineData1 = { yAxis:self.ctx.settings.annotations[j].fixedNumber}\n    seriesMarkLine.data.push(seriesMarkLineData1)\n    }\n    }\n    \n    \n                \n       \n       var markPoint= {\n                data: [\n                  \n                ]\n            }\n         if (settings.showMinValue) \n         markPoint.data.push({type: 'min', name: 'min'})\n         if (settings.showMaxValue) \n         markPoint.data.push({type: 'max', name: 'max'})\n        \n        \n        \n        let seriesElement =\n        {\n            name: legendElement,\n            itemStyle: {normal: {color: self.ctx.data[i].dataKey.color}},\n            type: (settings.chartType == 'Bar') ? 'bar' : 'line',\n            yAxisIndex: (settings.axisAssignment == 'Right') ? 1 : 0,\n            data: dataElement,\n            symbol: (self.ctx.settings.showDataPoints) ? 'circle' : 'none',\n            markLine: \n               seriesMarkLine,\n            markPoint : markPoint,\n            \n            \n        }\n        \n        if (settings.fillChart)\n        {\n            \n            let color1 = settings.gradientColor1 || '#0366fc'\n            \n            let color2 = settings.gradientColor2 || '#a7c5f2'\n        seriesElement.areaStyle= {\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          {\n            offset: 0,\n            color: adjustHexOpacity(color1, 0.5)\n          },\n          {\n            offset: 1,\n            color: color2\n          }\n        ])}\n        \n        \n        \n        }\n        \n        \n        \n        series.push(seriesElement)\n        \n        \n        \n        \n    \n    }\n    \n    \n\n\n    \n       option = {\n    tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n            type: 'cross',\n            crossStyle: {\n                color: '#999'\n            }\n        }\n    },\n    toolbox: {\n        \n        feature: {\n            dataView: {show: true, readOnly: false},\n            //magicType: {show: true, type: ['line', 'bar']},\n            //restore: {show: true},\n            saveAsImage: {show: true},\n            dataZoom: {\n        yAxisIndex: 'none'\n      },\n      restore: {}\n        }\n    },\n    legend: {\n        data: legend\n    },\n    xAxis: [\n        {\n            type: 'time',\n            axisLabel: {\n                hideOverlap: true\n              }\n            \n            //axisPointer: {\n            //    type: 'shadow'\n            //}\n        }\n    ],\n    dataZoom: [\n    {\n      type: 'inside',\n      throttle: 50\n    }\n  ],\n    yAxis: [\n        {\n            type: 'value',\n            name: self.ctx.settings.yAxisLeftTitle || '',\n            \n            //interval: 50,\n            axisLabel: {\n                formatter: '{value} '+(self.ctx.settings.yAxisLeftUnit || 'ml')\n            }\n        },\n        {\n            type: 'value',\n            name: self.ctx.settings.yAxisRightTitle || '',\n\n            //interval: 5,\n            axisLabel: {\n                formatter: '{value} '+(self.ctx.settings.yAxisRightUnit || 'ml')\n            }\n        }\n    ],\n    series: series\n};\n\nconsole.log(option);\nif (!self.ctx.settings.yAxisLeftAutoScale)\n{\n    \n    option.yAxis[0].min = self.ctx.settings.yAxisLeftMinScale || 0,\n     option.yAxis[0].max = self.ctx.settings.yAxisLeftMaxScale || 100\n}\nif (!self.ctx.settings.yAxisRightAutoScale)\n{\n    \n    option.yAxis[1].min = self.ctx.settings.yAxisRightMinScale || 0,\n     option.yAxis[1].max = self.ctx.settings.yAxisRightMaxScale || 100\n}\n\nmyChart.setOption(option);\nmyChart.resize();\n\n\n}\n\nself.onDataUpdated = function() {\n    self.onResize();\n\n}\n\nself.onResize = function() {\n    \n        $('#echart', self.ctx.$container)[0].style.height = self.ctx.height + \"px\";\n        $('#echart', self.ctx.$container)[0].style.width = (self.ctx.width-15) + \"px\";\n        $('#echart', self.ctx.$container)[0].style.paddingLeft = (5) + \"px\";\n        \n        draw();\n        \n}\n\nself.onEditModeChanged = function() {\n    \n}\n\nself.onMobileModeChanged = function() {\n    \n}\n\nself.getSettingsSchema = function() {\n   \n}\n\nself.getDataKeySettingsSchema = function() {\n    \n}\n\nself.onDestroy = function() {\n    \n}\n",
    "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"yAxisLeftTitle\": {\n                \"title\": \"Title Left Y-Axis\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"yAxisLeftUnit\": {\n                \"title\": \"Unit Left Y-Axis\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"yAxisRightTitle\": {\n                \"title\": \"Title Right Y-Axis\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"yAxisRightUnit\": {\n                \"title\": \"Unit Right Y-Axis\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"showDataPoints\": {\n                \"title\": \"Show Data points\",\n                \"type\": \"boolean\",\n                \"default\": false\n            }\n            ,\n            \n            \"yAxisLeftAutoScale\": {\n                \"title\": \"Left Y-Axis Autoscale\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"yAxisLeftMinScale\": {\n                \"title\": \"Left Y-Axis Min-Value\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"yAxisLeftMaxScale\": {\n                \"title\": \"Left Y-Axis Max-Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"yAxisRightAutoScale\": {\n                \"title\": \"Right Y-Axis Autoscale\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"yAxisRightMinScale\": {\n                \"title\": \"Right Y-Axis Min-Value\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"yAxisRightMaxScale\": {\n                \"title\": \"Right Y-Axis Max-Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"annotations\": {\n                \"title\": \"Annotations\",\n                \"type\": \"array\",\n                \"minItems\": 0,\n                \"items\": {\n                    \"title\": \"Attribute\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"annotationsType\": {\n                            \"title\": \"Annotations Type\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"Fixed\",\n                                \"Attribute\"\n                            ],\n                            \"default\": \"Fixed\"\n                        },\n                        \"fixedNumber\": {\n                \"title\": \"Fixed Number\",\n                \"type\": \"number\",\n                \"default\": 10\n            },\n                        \"attribute\": {\n                            \"title\": \"Attribute\",\n                            \"type\": \"string\"\n                        },\n                        \"color\": {\n                            \"title\": \"Color\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"Red\",\n                                \"Green\",\n                                \"Blue\",\n                                \"Yellow\"\n                            ],\n                            \"default\": \"Green\"\n                        },\n\n                        \"attributeType\": {\n                            \"title\": \"Attribute Type\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"Client\",\n                                \"Server\"\n                            ],\n                            \"default\": \"Client\"\n                        },\n                        \"axisAssignment\": {\n                            \"title\": \"Axis Assignment\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"Left\",\n                                \"Right\"\n                            ],\n                            \"default\": \"Left\"\n                        }\n                    },\n                    \"required\": [\"color\"]\n                }\n            }\n            \n        }\n        },\n    \"form\": [\n        \"yAxisLeftTitle\",\n        \"yAxisLeftUnit\",\n        \"yAxisLeftAutoScale\",\n        \"yAxisLeftMinScale\",\n        \"yAxisLeftMaxScale\",\n        \"yAxisRightTitle\",\n        \"yAxisRightUnit\",\n        \"yAxisRightAutoScale\",\n        \"yAxisRightMinScale\",\n        \"yAxisRightMaxScale\",\n        \"showDataPoints\",\n        \"annotations\"\n        \n        \n    ]\n}",
    "dataKeySettingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"DataKeySettings\",\n        \"properties\": {\n            \"chartType\": {\n                \"title\": \"Type\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"Line\",\n                    \"Bar\"],\n                \"default\": \"Line\"\n            },\n            \"showAverage\": {\n                \"title\": \"Show horizonal average line\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"showMinValue\": {\n                \"title\": \"Show min. Value\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"showMaxValue\": {\n                \"title\": \"Show max. value\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \n            \n            \n            \"gradientColor1\": {\n                \"title\": \"Gradient Color 1\",\n                \"type\": \"string\",\n                \"default\": \"#008a00\"\n            },\n            \"gradientColor2\": {\n                \"title\": \"Gradient Color 2\",\n                \"type\": \"string\",\n                \"default\": \"#008a00\"\n            },\n            \n            \"fillOpacity\": {\n                \"title\": \"Fill Opocity\",\n                \"type\": \"number\",\n                \"default\": 0.5\n            },\n            \"fillChart\": {\n                \"title\": \"fill Chart\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"axisAssignment\": {\n                \"title\": \"Axis Assignment\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"Left\",\n                    \"Right\"],\n                \"default\": \"Left\"\n            },\n            \"numberOfDigits\": {\n                \"title\": \"Number of Digits\",\n                \"type\": \"number\",\n                \"default\": 1\n            },\n        \n        \"required\": [\n                    ]\n        }\n        },\n    \"form\": [\n        \"chartType\",\n        \n        \n        \"showAverage\",\n        \"showMinValue\",\n        \"showMaxValue\",\n        \n        \n        \"fillChart\",\n        {\n            \"key\": \"gradientColor1\",\n            \"type\": \"color\"\n        },\n        {\n            \"key\": \"gradientColor2\",\n            \"type\": \"color\"\n        },\n        \"fillOpacity\",\n        \"axisAssignment\",\n        \"numberOfDigits\"\n    ]\n}",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"shadowSize\":4,\"fontColor\":\"#545454\",\"fontSize\":10,\"xaxis\":{\"showLabels\":true,\"color\":\"#545454\"},\"yaxis\":{\"showLabels\":true,\"color\":\"#545454\"},\"grid\":{\"color\":\"#545454\",\"tickColor\":\"#DDDDDD\",\"verticalLines\":true,\"horizontalLines\":true,\"outlineWidth\":1},\"legend\":{\"show\":true,\"position\":\"nw\",\"backgroundColor\":\"#f0f0f0\",\"backgroundOpacity\":0.85,\"labelBoxBorderColor\":\"rgba(1, 1, 1, 0.45)\"},\"decimals\":1,\"stack\":false,\"tooltipIndividual\":false},\"title\":\"Chart 2\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null}"
  }
}